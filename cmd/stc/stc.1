.\" Automatically generated by Pandoc 2.5
.\"
.TH "stc" "1" "" "" ""
.hy
.SH NAME
.PP
stc \- Stellar transaction compiler
.SH SYNOPSIS
.PP
stc [\-net=\f[I]id\f[R]] [\-z] [\-sign] [\-c|\-json] [\-l] [\-u] [\-i |
\-o FILE] \f[I]input\-file\f[R]
.PD 0
.P
.PD
stc \-edit [\-net=ID] \f[I]file\f[R]
.PD 0
.P
.PD
stc \-post [\-net=ID] \f[I]input\-file\f[R]
.PD 0
.P
.PD
stc \-preauth [\-net=ID] \f[I]input\-file\f[R]
.PD 0
.P
.PD
stc \-txhash [\-net=ID] \f[I]input\-file\f[R]
.PD 0
.P
.PD
stc \-qa [\-net=ID] \f[I]accountID\f[R]
.PD 0
.P
.PD
stc \-qt [\-net=ID] \f[I]txhash\f[R]
.PD 0
.P
.PD
stc \-qta [\-net=ID] \f[I]accountID\f[R]
.PD 0
.P
.PD
stc \-fee\-stats
.PD 0
.P
.PD
stc \-ledger\-header
.PD 0
.P
.PD
stc \-create [\-net=ID] \f[I]accountID\f[R]
.PD 0
.P
.PD
stc \-keygen [\f[I]name\f[R]]
.PD 0
.P
.PD
stc \-pub [\f[I]name\f[R]]
.PD 0
.P
.PD
stc \-import\-key \f[I]name\f[R]
.PD 0
.P
.PD
stc \-export\-key \f[I]name\f[R]
.PD 0
.P
.PD
stc \-list\-keys
.PD 0
.P
.PD
stc \-hint \f[I]PublicKey\f[R]
.PD 0
.P
.PD
stc \-mux \f[I]accountID\f[R] \f[I]uint64\f[R]
.PD 0
.P
.PD
stc \-demux \f[I]muxedAccount\f[R]
.PD 0
.P
.PD
stc \-opid \f[I]muxedAccount\f[R] \f[I]sequenceNumber\f[R]
\f[I]operationIndex\f[R] stc \-date YYYY\-MM\-DDThh:mm:ss[Z]
.PD 0
.P
.PD
stc \-builtin\-config
.SH DESCRIPTION
.PP
The Stellar transaction compiler, stc, is a command\-line tool for
creating, viewing, editing, signing, and posting Stellar network
transactions.
It is intended for use by scripts or for creating test transactions
without the ambiguity of higher\-layer wallet abstractions.
stc is also useful in non\-graphical environments, such as a
single\-board computer used for cold storage.
.PP
The tool runs in one of several modes.
The default mode processes a transaction in a single shot, optionally
updating the sequence numbers and fees, translating the transaction
to/from human\-readable form, or signing it.
In edit mode, stc repeatedly invokes a text editor to allow somewhat
interactive editing of transactions.
In hash mode, stc hashes a transactions to facilitate creation of
pre\-signed transactions or lookup of transaction results.
Key management mode allows one to maintain a set of signing keys.
Finally, network mode allows one to post transactions or query the
network for account and fee status.
.SS Default mode
.PP
The default mode parses a transaction (in either textual or
base64\-encoded binary), and then outputs it.
The input comes from a file specified on the command line, or from
standard input of the argument is \[lq]\f[C]\-\f[R]\[rq].
By default, stc outputs transactions in the human\-readable
\f[I]txrep\f[R] format, specified by SEP\-0011.
With the \f[C]\-c\f[R] flag, stc outputs base64\-encoded binary XDR
format.
Various options modify the transaction as it is being processed, notably
\f[C]\-sign\f[R], \f[C]\-key\f[R] (which implies \f[C]\-sign\f[R]), and
\f[C]\-u\f[R].
.PP
Txrep format is automatically derived from the XDR specification of
\f[C]TransactionEnvelope\f[R], with just a few special\-cased types.
The format is a series of lines of the form
\[lq]\f[C]Field\-Name: Value Comment\f[R]\[rq].
The field name is the XDR field name, or one of two pseudo\-fields.
Pointers have a boolean pseudofield called \f[C]_present\f[R] that is
true when the pointer is non\-null.
Variable\-length arrays have an integer pseudofield \f[C]len\f[R]
specifying the array length.
There must be no space between a field name and the colon.
After the colon comes the value for that field.
Anything after the value is ignored.
stc sometimes places a comment there, such as when an account ID has
been configured to have a comment (see the FILES section below).
.PP
Two field types have specially formatted values:
.IP \[bu] 2
Account IDs and Signers are expressed using Stellar\[cq]s
\[lq]strkey\[rq] format, which is a base32\-encoded format where public
keys start with \[lq]G\[rq], multiplexed accounts start with
\[lq]M\[rq], pre\-auth transaction hashes start with \[lq]T\[rq], and
hash\-X signers start with \[lq]X\[rq].
(Private keys start with \[lq]S\[rq] in strkey format, but never appear
in transactions.)
.IP \[bu] 2
Assets are formatted as \f[I]code\f[R]:\f[I]issuer\f[R], where codes are
formatted as printable ASCII bytes and two\-byte hex escapes (e.g.,
\f[C]\[rs]x1f\f[R]), with no surrounding quotes.
A literal backslash or colon in an asset code must be escaped (e.g.,
\f[C]\[rs]\[rs]\f[R]).
.IP \[bu] 2
The \f[C]asset\f[R] field in \f[C]AllowTrustOp\f[R] (where the issuer is
implicit) is rendered the same as the \f[I]code\f[R] in an asset.
.PP
Note that txrep is more likely to change than the base\-64 XDR encoding
of transactions.
Hence, if you want to preserve transactions that you can later read or
re\-use, compile them with \f[C]\-c\f[R].
XDR is also compatible with other tools.
Notably, you can examine the contents of an XDR transaction with
\f[C]stellar\-core\f[R] itself, using the command
\[lq]\f[C]stellar\-core print\-xdr \-\-filetype tx \-\-base64 FILE\f[R]\[rq],
or by using the web\-based Stellar XDR viewer at
<https://www.stellar.org/laboratory/#xdr-viewer>.
You can also sign XDR transactions with \f[C]stellar\-core\f[R], using
\[lq]\f[C]stellar\-core sign\-transaction \-\-base64 \-\-netid \[aq]Public Global Stellar Network ; September 2015\[aq] FILE\f[R]\[rq].
.SS Edit mode
.PP
Edit mode is selected whenever stc is invoked with the \f[C]\-edit\f[R]
flag.
In this mode, whether the transaction is originally in base64 binary or
text, it is output in text format to a temporary file and your editor is
repeatedly invoked to edit the file.
In this way, you can change union discriminant values or array sizes,
quit the editor, and automatically re\-enter the editor with any new
fields appropriately populated.
.PP
Note that for enum fields, if you add a question mark (\[lq]?\[rq]) to
the end of the line, stc will populate the line with a comment
containing all possible values.
This is handy if you forget the various options to a union discriminant
such as the operation type.
.PP
Edit mode terminates when you quit the editor without modifying the
file, at which point stc writes the transaction back to the original
file.
.SS Hash mode
.PP
Stellar hashes transactions to a unique 32\-byte value that depends on
the network identification string.
A transaction\[cq]s hash, in hex format, can be used to query horizon
for the results of the transaction after it executes.
With the option \f[C]\-txhash\f[R], stc hashes transaction and outputs
this hex value.
.PP
Stellar also allows an account to be configured to allow a
pre\-authorized transaction to have a specific signing weight.
These pre\-authorized transactions use the same network\-dependent hash
values as computed by \f[C]\-txhash\f[R].
However, to include such a hash as an account signer, it must be encoded
in strkey format starting with the letter \[lq]T\[rq].
Running stc with the \f[C]\-preauth\f[R] flag prints this strkey\-format
hash to standard output.
.PP
Great care must be taken when creating a pre\-authorized transaction, as
any mistake will cause the transaction not to run.
In particular, make sure you have set the sequence number to one more
than it will be at the time you run the transaction, not one more than
it is currently.
(If the transaction adding the pre\-authorized transaction as a signer
uses the same source account, it will consume a sequence number.) You
should also make sure the transaction fee is high enough.
You may wish to increase the fee above what is currently required in
case the fee has increased at the time you need to execute the
pre\-authorized transaction.
.PP
Another potential source of error is that the pre\-authorized
transaction hash depends on the network name, so make absolutely sure
the \f[C]\-net\f[R] option is correct when using \f[C]\-preauth\f[R].
.SS Key management mode
.PP
stc runs in key management mode when one of the following flags is
selected: \f[C]\-keygen\f[R], \f[C]\-pub\f[R], \f[C]\-import\-key\f[R],
\f[C]\-export\-key\f[R], and \f[C]\-list\-keys\f[R].
.PP
These options take a key name.
If the key name contains a slash, it refers to a file in the file
system.
If the key name does not contain a slash, it refers to a file name in
the stc configuration directory (see FILES below).
This allows keys to be stored in the configuration directory and then
accessed from any directory in which stc runs.
.PP
The \f[C]\-keygen\f[R] and \f[C]\-pub\f[R] options can be run with no
key name, in which case \f[C]\-keygen\f[R] will output both the secret
and public key to standard output, and \f[C]\-pub\f[R] will read a key
from standard input or prompt for one to be pasted into the terminal.
.PP
Keys are generally stored encrypted, but if you supply an empty
passphrase, they will be stored in plaintext.
If you use the \f[C]\-nopass\f[R] option, stc will never prompt for a
passphrase and always assume you do not encrypt your private keys.
.SS Network query mode
.PP
stc runs in network query mode when one of the \f[C]\-post\f[R],
\f[C]\-fee\-stats\f[R], \f[C]\-ledger\-header\f[R], \f[C]\-qa\f[R],
\f[C]\-qt\f[R], \f[C]\-qta\f[R], or \f[C]\-create\f[R] options is
provided.
.PP
Post\-mode, selected by \f[C]\-post\f[R], submits a transaction to the
Stellar network.
This is how you actually execute a transaction you have properly
formatted and signed.
.PP
\f[C]\-fee\-stats\f[R] reports on recent transaction fees.
\f[C]\-ledger\-header\f[R] returns the latest ledger header.
\f[C]\-qa\f[R] reports on the state of a particular account.
\f[C]\-qt\f[R] reports the result of a transaction that has been
previously submitted.
\f[C]\-qta\f[R] reports transactions on an account in reverse
chronological order (use \f[C]\-qt\f[R] to get more detail on any
transaction ID).
Unfortunately, some of these requests are parsed from horizon responses
in JSON rather than XDR format, and so are reported in a somewhat
incomparable style to txrep format.
\f[C]\-create\f[R] creates and funds an account (which only works when
the test network is specified).
.SS Miscellaneous modes
.PP
The \f[C]\-date\f[R] option parses a date and converts it to a Unix
time.
This is convenient for determining the Unix time to place in Timebounds.
The time can have one of several formats:
.IP \[bu] 2
\f[C]2006\-01\-02T15:04:05Z\f[R] (for parsing in UTC timezone)
.IP \[bu] 2
\f[C]2006\-01\-02T15:04:05\-07:00\f[R] (for parsing in a specific
timezone)
.IP \[bu] 2
\f[C]2006\-01\-02T15:04:05\f[R] (local time)
.IP \[bu] 2
\f[C]2006\-01\-02T15:04\f[R] (local time)
.IP \[bu] 2
\f[C]2006\-01\-02\f[R] (local time)
.PP
Stellar requires each signature to be paired with the last 4 bytes of
the public key (known as the \[lq]hint\[rq]), so as to facilitate
matching the signature to the key.
The \f[C]\-hint\f[R] option outputs the hint corresponding to a
particular \f[C]PublicKey\f[R], for use when manually constructing
\f[C]DecoratedSignature\f[R]s.
.PP
The \f[C]\-mux\f[R] and \f[C]\-demux\f[R] options construct and
deconstruct a multiplexed account identifier or \[lq]MuxedAccount\[rq].
MuxedAccounts behave the same as the underlying accounts, but contain an
unsigned 64\-bit integer that acts as a kind of comment.
This allows a single account holder to give out multiple addresses that
point the same underlying account.
.PP
The \f[C]\-opid\f[R] option calculates an operation ID for use in a
\f[C]CLAIM_CLAIMABLE_BALANCE\f[R] operation.
.PP
If no \f[C]stc.conf\f[R] configuration file exists, stc will use a
built\-in one.
To see the contents of the built\-in file, you can print it with
\f[C]\-builtin\-config\f[R].
.SH OPTIONS
.TP
.B \f[C]\-builtin\-config\f[R]
Print the built\-in system configuration file that is used if no
\f[C]stc.conf\f[R] file is found.
.TP
.B \f[C]\-c\f[R]
Compile the output to base64 XDR binary.
Otherwise, the default is to preserve the format (with \f[C]\-i\f[R] and
\f[C]\-edit\f[R]) or output in text mode to standard output or new
files.
Only available in default mode.
.TP
.B \f[C]\-create\f[R]
Create and fund an account on a network with a \[lq]friendbot\[rq] that
gives away coins.
Currently the stellar test network has such a bot available by querying
the \f[C]/friendbot?addr=ACCOUNT\f[R] path on horizon.
.TP
.B \f[C]\-date\f[R]
Compute a Unix time from a human\-readable time.
.TP
.B \f[C]\-demux\f[R]
Break a \f[C]MuxedAccount\f[R] (starting with \f[C]M\f[R]) into its
component \f[C]AccountID\f[R] (starting with \f[C]G\f[R]) 64\-bit
identifier.
.TP
.B \f[C]\-edit\f[R]
Select edit mode.
.TP
.B \f[C]\-export\-key\f[R]
Print a private key in strkey format to standard output.
.TP
.B \f[C]\-fee\-stats\f[R]
Dump fee stats from network
.TP
.B \f[C]\-help\f[R]
Print usage information.
.TP
.B \f[C]\-hint\f[R]
Return the last 4 bytes of a public key as a 32\-bit \[lq]hint\[rq],
required in \f[C]DecoratedSignature\f[R]s.
.TP
.B \f[C]\-i\f[R]
Edit in place\[em]overwrite the input file with the stc\[cq]s output.
The original file is saved with a \f[C]\[ti]\f[R] appended to the name.
Only available in default mode.
.TP
.B \f[C]\-import\-key\f[R]
Read a private key from the terminal (or standard input) and write it
(optionally encrypted) into a file (if the name has a slash) or into the
configuration directory.
.TP
.B \f[C]\-json\f[R]
Output the transaction in JSON format, using field names similar to
txrep format.
The JSON representation of transactions is mechanically derived from XDR
in a similar fashion as txrep.
However, the mapping of XDR to JSON is not standardized anywhere and
could change between releases of stc.
Nonetheless, this option may be convenient in scenarios in which you
have tools for parsing JSON.
.TP
.B \f[C]\-key\f[R] \f[I]name\f[R]
Specifies the name of a key to sign with.
Implies the \f[C]\-sign\f[R] option.
Only available in default mode.
.TP
.B \f[C]\-keygen\f[R] [\f[I]file\f[R]]
Creates a new public keypair.
With no argument, prints first the secret then the public key to
standard output.
When given an argument, writes the public key to standard output and the
private key to a file, asking for a passphrase if you don\[cq]t supply
\f[C]\-nopass\f[R].
Note that if file contains a `/' character, the file is taken relative
to the current working directory or root directory.
If it does not, the file is stored in stc\[cq]s configuration directory.
.TP
.B \f[C]\-l\f[R]
Learn all signers associated with an account.
Queries horizon and stores the signers under the network\[cq]s
configuration directory, so that it can verify signatures from all keys
associated with the account.
Only available in default mode.
.TP
.B \f[C]\-list\-keys\f[R]
List all private keys stored under the configuration directory.
.TP
.B \f[C]\-mux\f[R]
Combine an \f[C]AccountID\f[R] (starting with \f[C]G\f[R]) and 64\-bit
identifier into a \f[C]MuxedAccount\f[R].
.TP
.B \f[C]\-net\f[R] \f[I]name\f[R]
Specify which network to use for hashing, signing, and posting
transactions, as well as for querying signers with the \f[C]\-l\f[R]
option.
Two pre\-defined names are \[lq]main\[rq] and \[lq]test\[rq], but you
can configure other networks in \f[C]stc.conf\f[R] or by creating
per\-network configuration files as discussed in the FILES section
below.
.TP
.B \f[C]\-nopass\f[R]
Never prompt for a passphrase, so assume an empty passphrase anytime one
is required.
.TP
.B \f[C]\-o\f[R] \f[I]file\f[R]
Specify a file in which to write the output.
The default is to send the transaction to standard output unless
\f[C]\-i\f[R] has been supplied.
\f[C]\-i\f[R] and \f[C]\-o\f[R] are mutually exclusive, and can only be
used in default mode.
.TP
.B \f[C]\-post\f[R]
Submit the transaction to the network.
.TP
.B \f[C]\-preauth\f[R]
Hash a transaction to strkey for use as a pre\-auth transaction signer.
Beware that \f[C]\-net\f[R] must be set correctly or the hash will be
incorrect, since the input to the hash function includes the network ID
as well as the transaction.
.TP
.B \f[C]\-pub\f[R]
Print the public key corresponding to a particular private key.
.TP
.B \f[C]\-qa\f[R]
Query the network for the state of a particular account.
.TP
.B \f[C]\-qt\f[R]
Query the network for the results and effects of a particular
transaction.
The transaction must be specified in the hex format output by
\f[C]\-txhash\f[R].
.TP
.B \f[C]\-qta\f[R]
Query the network for all transactions that have affected a particular
account, in reverse chronological order.
Also shows the effects those transactions had on the target account.
To see effects on all accounts, you can look up a particular transaction
using \f[C]\-qt\f[R].
.TP
.B \f[C]\-sign\f[R]
Sign the transaction.
If no \f[C]\-key\f[R] option is specified, it will prompt for the
private key on the terminal (or read it from standard input if standard
input is not a terminal).
.TP
.B \f[C]\-txhash\f[R]
Like \f[C]\-preauth\f[R], but outputs the hash in hex format.
Like \f[C]\-preauth\f[R], also gives incorrect results if
\f[C]\-net\f[R] is not properly specified.
.TP
.B \f[C]\-u\f[R]
Query the network to update the fee and sequence number.
The fee depends on the number of operations, so be sure to re\-run this
if you change the number of transactions.
Only available in default mode.
.TP
.B \f[C]\-v\f[R]
Produce more verbose output for the query options.
.TP
.B \f[C]\-z\f[R]
Sets the signature vector to zero length, clearing out any previous
signatures on a transaction.
.SH EXAMPLES
.TP
.B \f[C]stc trans\f[R]
Reads a transaction from a file called \f[C]trans\f[R] and prints it to
standard output in human\-readable form.
.TP
.B \f[C]stc \-edit trans\f[R]
Run the editor on the text format of the transaction in file
\f[C]trans\f[R] (which can be either text or base64 XDR, or not exist
yet in which case it will be created in XDR format).
Keep editing the file until the editor quits without making any changes.
.TP
.B \f[C]stc \-c \-i \-key mykey trans\f[R]
Reads a transaction in file \f[C]trans\f[R], signs it using key
\f[C]mykey\f[R], then overwrite the \f[C]trans\f[R] file with the signed
transaction in base64 format.
The original unsigned transaction is backed up in \f[C]trans\[ti]\f[R].
.TP
.B \f[C]stc \-post trans\f[R]
Posts a transaction in file \f[C]trans\f[R] to the network.
The transaction must previously have been signed.
.TP
.B \f[C]stc \-keygen\f[R]
Generate a new private/public key pair and print them both to standard
output, one per line (private key first).
.TP
.B \f[C]stc \-keygen mykey\f[R]
Generate a new private/public key pair.
Prompt for a passphrase.
Print the public key to standard output.
Write the private key to \f[C]$HOME/.config/stc/keys/mykey\f[R]
encrypted with the passphrase.
.TP
.B \f[C]stc trans | sed \-n \[aq]s/\[ha]tx.sourceAccount: *//p\[aq]\f[R]
Extract the source account field of a transaction in file
\f[C]trans\f[R], using sed to strip the txrep field name and print the
key.
.TP
.B \f[C]stc \-json trans | jq \-r .tx.sourceAccount\f[R]
Use the \f[C]jq\f[R] command\-line JSON processor to extract the source
account of the transaction in file \f[C]trans\f[R].
.TP
.B Here string private key
The following shell script:
.RS
.IP
.nf
\f[C]
#!/bin/bash
PRIV=SAIJXTLM3FRBVO7ZLFZM35T2E3WPSOTK24ERXXDUON6AU7ECPNM33MFT
PUB=\[ga]stc \-pub <<<$PRIV\[ga]
stc \-c \-u \-key /dev/fd/3 \- 3<<<$PRIV << EOF
tx.sourceAccount: $PUB
tx.operations.len: 1
tx.operations[0].body.type: CREATE_ACCOUNT
tx.operations[0].body.createAccountOp.destination: GCUOUYGM7GJ27PGHE5FSGDAMPOSPWH6Z26YHMJJVGWWKTUBYMZDBT3I5
tx.operations[0].body.createAccountOp.startingBalance: 100000000
EOF
\f[R]
.fi
.PP
creates a transaction from standard input and signs it using a key that
has been directly specified using bash\[cq]s \[lq]here string\[rq]
syntax.
Note that there is no way to pass a raw private key on the command line,
because command\-line arguments are visible to other users would thus
leak the secret.
On the other hand, using a here string to pass the private key as file
descriptor 3 is safe.
.RE
.SH ENVIRONMENT
.TP
.B STCEDITOR, EDITOR
Name of editor to invoke with the \f[C]\-edit\f[R] argument.
If \f[C]STCEDITOR\f[R] is defined, it takes priority.
Otherwise, if \f[C]EDITOR\f[R] is defined, stc uses that.
If neither is defined, stc defaults to \f[C]vi\f[R].
.TP
.B STCDIR
Directory containing all the configuration files (default:
\f[C]$XDG_CONFIG_HOME/stc\f[R] or \f[C]$HOME/.config/stc\f[R])
.TP
.B STCNET
Name of network to use by default if not overridden by \f[C]\-net\f[R]
argument (default: \f[C]default\f[R])
.SH FILES
.PP
Configuration files use the INI file format specified in the
git\-config(1) manual page.
This also means you can use a command such as
\f[C]git config \-f \[ti]/.config/stc/stc.conf net.main.horizon https://...\f[R]
to edit the configuration files.
An example of this syntax is:
.IP
.nf
\f[C]
[net]
name = main
network\-id = \[dq]Public Global Stellar Network ; September 2015\[dq]
horizon = https://horizon.stellar.org/
native\-asset = XLM
\f[R]
.fi
.PP
When using a network \f[I]NetName\f[R], as specified by
\f[C]$STCNET\f[R] or the \f[C]\-net\f[R] command\-line argument, three
configuration files are parsed in order:
.IP "1." 3
$STCDIR/\f[I]NetName\f[R].net (or the default value of $STCDIR as
described in the ENVIRONMENT section if $STCDIR is unset)
.IP "2." 3
\f[C]$STCDIR/global.conf\f[R]
.IP "3." 3
The system configuration, which comes from the first to exist of the
following files: \f[C]$STCDIR/stc.conf\f[R], \f[C]/etc/stc.conf\f[R], or
\f[C]../share/stc.conf\f[R] relative to the executable.
If none of these files exist, stc uses the built\-in version returned by
the \f[C]\-builtin\-config\f[R] option.
.PP
A key is set to the first value encountered.
This means definitions in the $STCDIR/\f[I]NetName\f[R].net file take
precedence over ones in the \f[C]global.conf\f[R] file, which in turn
has precedence over the global configuration file.
However, it is possible to undefine a key by including it without an
equals sign, in which case it can be redefined.
For example, the following would override any previously set
network\-id:
.IP
.nf
\f[C]
[net \[dq]main\[dq]]
network\-id
network\-id = \[dq]Public Global Stellar Network ; September 2015\[dq]
\f[R]
.fi
.PP
Subsections are only considered when the subsection string matches the
network name.
Hence, the section \f[C][signers]\f[R] applies to all networks, while
\f[C][signers \[dq]main\[dq]]\f[R] only applies to network main.
Generally the $STCDIR/\f[I]NetName\f[R].net file will include a
\f[C][net]\f[R] section, since it is for only one network, while the
global and system defaults will include sections
\f[C][net \[dq]main\[dq]]\f[R] and \f[C][net \[dq]test\[dq]]\f[R] for
per\-network defaults.
.PP
The recognized keys are as follows:
.TP
.B \f[C]net.name\f[R]
Specifies the name of the network, which affects which subsections will
be parsed as described above.
This parameter can only be set in a \f[C][net]\f[R] section in the
$STCDIR/\f[I]NetName\f[R].net file, as it does not make sense to set
this globally.
Note that the value only changes subsequently parsed sections; if the
network name is changed, previously parsed sections with the new name
have already been ignored and will not be reconsidered.
.TP
.B \f[C]net.network\-id\f[R]
The network ID that permutes signatures and pre\-signed\-transaction
hashes (which prevents signatures from being valid on more than one
instantiation of the Stellar network).
If this is not specified, stc automatically fetches and stores the
network ID the first time it is used.
.TP
.B \f[C]net.horizon\f[R]
The base URL of the horizon instance to use for this network.
You may wish to change this URL to use your own local validator if you
are running one, or else that of an exchange that you trust.
Note that the URL \f[I]must\f[R] end with a \f[C]/\f[R] (slash)
character.
.TP
.B \f[C]net.native\-asset\f[R]
Shows how to render the native asset\[em]e.g., \f[C]XLM\f[R] for the
stellar main network, and \f[C]TestXLM\f[R] for the stellar test
network.
If not specified, it defaults to the string \f[C]NATIVE\f[R].
Note that this only controls how the asset is rendered not parsed.
When parsing, any string not ending \[lq]:IssuerAccountID\[rq] is
considered the native asset.
.TP
.B accounts._AccountID_
Specifies a human\-readable comment for \f[I]AccountID\f[R] (which must
be in strkey format)
.TP
.B signers._SignerKey_
Specifies a human\-readable comment for \f[I]SigherKey\f[R] (in strkey
format)
.SH SEE ALSO
.PP
stellar\-core(1), gpg(1), git\-config(1)
.PP
The Stellar web site: <https://www.stellar.org/>
.PP
Stellar\[cq]s web\-based XDR viewer:
.PD 0
.P
.PD
<https://www.stellar.org/laboratory/#xdr-viewer>
.PP
SEP\-0011, the specification for txrep format:
.PD 0
.P
.PD
<https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0011.md>
.PP
SEP\-0023, the specification for strkey:
<https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0023.md>
.PP
RFC4506, the specification for XDR:
.PD 0
.P
.PD
<https://tools.ietf.org/html/rfc4506>
.PP
The XDR definition of a \f[C]TransactionEnvelope\f[R]:
.PD 0
.P
.PD
<https://github.com/stellar/stellar-core/blob/master/src/xdr/Stellar-transaction.x>
.SH BUGS
.PP
stc accepts and generates any \f[C]TransactionEnvelope\f[R] that is
valid according to the XDR specification.
However, a \f[C]TransactionEnvelope\f[R] that is syntactically valid XDR
may not be a valid Stellar transaction.
stellar\-core imposes additional restrictions on transactions, such as
prohibiting non\-ASCII characters in certain string fields.
This fact is important to keep in mind when using stc to examine
pre\-signed transactions: what looks like a valid, signed transaction
may not actually be valid.
.PP
stc uses a potentially imperfect heuristic to decide whether a file
contains a base64\-encoded binary transaction a txrep transaction, or
JSON input.
.PP
stc can only encrypt secret keys with symmetric encryption.
However, the \f[C]\-sign\f[R] option will read a key from standard
input, so you can always run
\f[C]gpg \-d keyfile.pgp | stc \-sign \-i txfile\f[R] to sign the
transaction in \f[C]txfile\f[R] with a public\-key\-encrypted signature
key in \f[C]keyfile.pgp\f[R].
.PP
The options that interact with Horizon and parse JSON (such as
\f[C]\-qa\f[R]) report things in a different style from the options that
manipulate XDR.
.PP
The txrep format has periodically been updated, and stc does not attempt
to maintain backwards compatibility with old files.
Binary XDR, however, has been standard since 1995, so stc should be able
to parse any binary transaction since the launch of the Stellar network.
.SH AUTHORS
David Mazi\[`e]res.
